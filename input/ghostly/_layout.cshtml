<!DOCTYPE html>
<html>
<head>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-145723988-1"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'UA-145723988-1');
    </script>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="/assets/bootstrap/bootstrap.css" rel="stylesheet" />
    <link href="/assets/ghostly/css/styles.css" rel="stylesheet" />

    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&family=Roboto+Slab:wght@400;700&family=Roboto:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap" rel="stylesheet" data-no-mirror>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.19.0/themes/prism.css">

    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script src="https://kit.fontawesome.com/a1cad7ed9a.js" crossorigin="anonymous" data-no-mirror></script>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@8.4.8/dist/mermaid.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.19.0/components/prism-core.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.19.0/plugins/autoloader/prism-autoloader.min.js" data-no-mirror></script>

    @{
        string title = @Document.ContainsKey(Keys.Title) ? $"Ghostly - {Document.GetString(Keys.Title)}" : "Ghostly";
    }
    <title>@title</title>
</head>
<body class="d-flex flex-column">
    <div class="flex-grow-1 d-flex flex-column">
        <nav id="topnav" class="navbar navbar-expand-lg navbar-light">
            <div class="container py-3">
                <a class="navbar-brand" href="/ghostly"><img id="logo" src="/assets/ghostly/logo.svg" alt="Ghostly"></a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarText" style="margin-left: 20px;">
                    <ul class="navbar-nav mr-auto">
                        <li id="nav-docs" class="nav-item">
                            <a class="nav-link text-white font-weight-light font-size-lg" href="/ghostly/docs">Documentation</a>
                        </li>
                        <li class="nav-item mx-3 border-right d-none d-lg-block"></li>
                        <li id="nav-docs" class="nav-item">
                            <a class="nav-link text-white font-weight-light font-size-lg" href="https://github.com/spectresystems/ghostly/issues/new/choose">Report an issue</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link text-dark font-size-lg" href="https://www.microsoft.com/store/apps/9N5MVRB0XC60?cid=storebadge&ocid=badge"><i class="fab fa-microsoft"></i> Download from Microsoft Store</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>

        @if (IsSectionDefined(Constants.Sections.Splash))
        {
            @RenderSection(Constants.Sections.Splash, false)
        }
        @{
            string section = Document.Destination.Segments.Length > 1 ? Document.Destination.Segments[0].ToString() : null;
        }
        <div class="flex-grow-1 d-flex flex-column @(section != null ? "section-" + section : null)">
            @if (section != null && !Document.GetBool("DisableSubtitle", false))
            {
                <div id="titlebar" class="py-4" style="padding-top: 0px !important">
                    <div class="container">
                        @* <div class="row">
                            @{
                                string titleBarClasses = Document.GetBool(Constants.NoSidebar) ? string.Empty : "offset-md-3 offset-lg-2";
                            }
                            <div class="@titleBarClasses px-3 px-md-0">
                                <div class="text-white m-0 title">@(Document.GetString(Keys.Title) ?? Document.GetTitle())</div>
                                @if (IsSectionDefined(Constants.Sections.Subtitle))
                                {
                                    @RenderSection(Constants.Sections.Subtitle, false)
                                }
                            </div>
                        </div> *@
                    </div>
                </div>
            }
            <div class="flex-grow-1 d-flex flex-column">
                @if (Document.GetBool(Constants.NoContainer))
                {
                    <div class="bg-white">
                        @RenderBody()
                    </div>
                }
                else
                {
                    <div class="container flex-grow-1 d-flex flex-column ">
                        <div class="row flex-grow-1 align-items-stretch">
                            @if (Document.GetBool(Constants.NoSidebar))
                            {
                                IgnoreSection(Constants.Sections.Sidebar);

                                <div class="col">
                                    @RenderBody()
                                </div>
                            }
                            else
                            {
                                <div class="sidebar col-md-3 col-lg-2 pt-2 bg-body" style="padding-top: 10px !important;">
                                    @if (IsSectionDefined(Constants.Sections.Sidebar))
                                    {
                                        @RenderSection(Constants.Sections.Sidebar, false)
                                    }
                                    else
                                    {
                                        IDocument root = Outputs[nameof(Content)].First(x => x.Destination == section + "/index.html");
                                        @*<div class="sidebar-nav-item @(Document.IdEquals(root) ? "active" : null)">
                                                @Html.Raw(section)
                                                @Html.DocumentLink(root)
                                            </div>*@

                                        @foreach (IDocument document in root.GetChildren().OnlyVisible())
                                        {
                                            <div class="sidebar-nav-item @(Document.IdEquals(document) ? "active" : null) @(document.HasChildren() ? "has-children" : null)" style="padding-top: 0">
                                                    @Html.DocumentLink(document)
                                                </div>

                                            @if (document.HasVisibleChildren())
                                            {
                                                @foreach (IDocument child in document.GetChildren().OnlyVisible())
                                                {
                                                    <div class="sidebar-nav-item @(Document.IdEquals(child) ? "active" : null) @(child.HasChildren() ? "has-children" : null)" style="padding-top: 0">
                                                        @Html.DocumentLink(child)
                                                    </div>
                                                    
                                                    @if(child.HasChildren()) 
                                                    {
                                                        <div class="sidebar-nav-children @(Document.IdEquals(child) || child.GetChildren().Any(x => Document.IdEquals(x)) ? "active" : null)" style="padding-bottom: 0">
                                                            @foreach (IDocument childchild in child.GetChildren().OnlyVisible())
                                                            {
                                                                <div class="sidebar-nav-child @(Document.IdEquals(childchild) ? "active" : null)">
                                                                    @Html.DocumentLink(childchild)
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                }
                                            }
                                        }
                                    }
                                </div>
                                <div class="col-md-9 col-lg-8 pt-4 pt-md-0 pb-4 px-4" 
                                      style="background: white; border-top-left-radius: 8px; border-top-right-radius: 8px; border-bottom-right-radius: 8px; border-bottom-left-radius: 8px; border-style: solid; border-color: white">
                                    <div style="margin-top: 20px;">
                                        <h1>@(Document.GetString(Keys.Title) ?? Document.GetTitle())</h1>
                                        <hr />
                                        @RenderBody()
                                    </div>
                                </div>
                            }
                            @if (Document.GetBool("ShowRightSidebar", true))
                            {
                                <div class="col-lg-2 d-none d-lg-block bg-body pl-3 pt-3" style="padding-top: 10px !important; padding-left: 30px !important">
                                    @{
                                        IReadOnlyList<IDocument> headings = Document.GetDocumentList(Statiq.Html.HtmlKeys.Headings);
                                        if (headings.Count > 0)
                                        {
                                            <div class="border-bottom mb-3">
                                                <p class="small font-weight-bold">On This Page</p>
                                                @foreach (IDocument heading in headings)
                                                {
                                                    <p class="small"><a href="#@(heading.GetString(Statiq.Html.HtmlKeys.HeadingId))">@(await heading.GetContentStringAsync())</a></p>
                                                }
                                            </div>
                                        }
                                    }
                                    @if (Document.ContainsKey("EditLink") && Document.GetBool("ShowEditLink", true))
                                    {
                                        <p class="small font-weight-bold"><a href="@Document.GetString("EditLink")"><i class="fad fa-pencil"></i> Edit This Page</a></p>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @if (Document.GetBool(Constants.NoContainer))
    {
        <div id="footer" class="p-3 text-gray font-size-sm text-center">
            <div class="container">
                <div>© 2018-@DateTime.Today.Year Spectre Systems AB</div>
            </div>
        </div>
    }
    else
    {
        <div id="ghostly-footer" class="p-3 text-gray font-size-sm text-center" style="margin-top: 20px; margin-bottom: 10px;">
            <div class="container">
                <div style="color: #57A1AF">© 2018-@DateTime.Today.Year Spectre Systems AB</div>
            </div>
        </div>
    }
</body>
</html>